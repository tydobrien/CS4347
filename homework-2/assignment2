import pandas as pd
import urllib
import sklearn
from sklearn.model_selection import train_test_split
import os
import numpy as np
from operator import itemgetter
import pickle
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
# requirements : 
#     recommended platform : ubuntu
#     python == 3.7
#     pip install pandas
#     pip install numpy
#     pip install sklearn
#     pip install seaborn
#     pip install matplotlib

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

%matplotlib inline

if not os.path.exists('./Skin_NonSkin.txt'):
    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00229/Skin_NonSkin.txt'
    urllib.request.urlretrieve(url,'./Skin_NonSkin.txt')
    
df = pd.read_csv('Skin_NonSkin.txt', sep='\t',names =['B','G','R','skin'])
df.head()

# NO MISSING VALUES
df.isna().sum()

feature = df[df.columns[~df.columns.isin(['skin'])]] #Except Label
label = (df[['skin']] == 1)*1 #Converting to 0 and 1 (this col has values 1 and 2)
feature = feature / 255. #Pixel values range from 0-255 converting between 0-1

feature.head()
label.head()

alldf = pd.concat([feature,label], sort=True, axis=1)

sample = alldf.sample(1000)
onlybgr = sample[sample.columns[~sample.columns.isin(['skin'])]]
sns.pairplot(onlybgr)

sample_ = sample.copy()
sample_['skin'] = sample.skin.apply(lambda x:{1:'skin',0:'not skin'}.get(x))
sns.pairplot(sample_, hue="skin")
# sample

sns.pairplot(onlybgr, kind="reg")

# Lets see how many 0s and 1s
(label == 0).skin.sum(),(label == 1).skin.sum()

########### SPLITTING DATA INTO 5

x = feature.values
y = label.values

# We will keep fix test and take 5 cross validation set
# so we will have five different data set
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.20, random_state=1)

#Lets see the size of xtrain, xtest
len(xtrain),len(xtest)

# 5 Fold Split
# First merge xtrain and ytrain so that we can easily divide into 5 chunks

data = np.concatenate([xtrain,ytrain],axis = 1)
# Observe the shape of array
xtrain.shape,ytrain.shape,data.shape

# Divide our data to 5 chunks
chunks = np.split(data,5)

datadict = {'fold1':{'train':{'x':None,'y':None},'val':{'x':None,'y':None},'test':{'x':xtest,'y':ytest}},
            'fold2':{'train':{'x':None,'y':None},'val':{'x':None,'y':None},'test':{'x':xtest,'y':ytest}},
            'fold3':{'train':{'x':None,'y':None},'val':{'x':None,'y':None},'test':{'x':xtest,'y':ytest}}, 
            'fold4':{'train':{'x':None,'y':None},'val':{'x':None,'y':None},'test':{'x':xtest,'y':ytest}},
            'fold5':{'train':{'x':None,'y':None},'val':{'x':None,'y':None},'test':{'x':xtest,'y':ytest}},}

for i in range(5):
    datadict['fold'+str(i+1)]['val']['x'] = chunks[i][:,0:3]
    datadict['fold'+str(i+1)]['val']['y'] = chunks[i][:,3:4]
    
    idx = list(set(range(5))-set([i]))
    X = np.concatenate(itemgetter(*idx)(chunks),0)
    datadict['fold'+str(i+1)]['train']['x'] = X[:,0:3]
    datadict['fold'+str(i+1)]['train']['y'] = X[:,3:4]
    
def writepickle(data, filename):
    with open(filename, 'wb') as f:
        pickle.dump(data, f)

def readpickle(filename):
    with open(filename, 'rb') as f:
        data = pickle.load(f)
    return data

writepickle(datadict,'data.pkl')

data = readpickle('data.pkl')

df = pd.DataFrame(columns=['VAL','TEST'])

######### FOLD 1 ################
fold1 = data['fold1']
fold1_train = fold1['train']
fold1_val = fold1['val']
fold1_test = fold1['test']

xtrain1, ytrain1 = fold1_train['x'],fold1_train['y']
xval1, yval1 = fold1_val['x'], fold1_val['y']
xtest1, ytest1 = fold1_test['x'],fold1_test['y']

###### FOLD 2 ###############
fold2 = data['fold2']
fold2_train = fold2['train']
fold2_val = fold2['val']
fold2_test = fold2['test']

xtrain2, ytrain2 = fold2_train['x'],fold2_train['y']
xval2, yval2 = fold2_val['x'], fold2_val['y']
xtest2, ytest2 = fold2_test['x'],fold2_test['y']

################ FOLD 3 ##########
fold3 = data['fold3']
fold3_train = fold3['train']
fold3_val = fold3['val']
fold3_test = fold3['test']

xtrain3, ytrain3 = fold3_train['x'],fold3_train['y']
xval3, yval3 = fold3_val['x'], fold3_val['y']
xtest3, ytest3 = fold3_test['x'],fold3_test['y']

############ FOLD 4 ###############
fold4 = data['fold4']
fold4_train = fold4['train']
fold4_val = fold4['val']
fold4_test = fold4['test']

xtrain4, ytrain4 = fold4_train['x'],fold4_train['y']
xval4, yval4 = fold4_val['x'], fold4_val['y']
xtest4, ytest4 = fold4_test['x'],fold4_test['y']

############# FOLD 5 ####################
fold5 = data['fold5']
fold5_train = fold5['train']
fold5_val = fold5['val']
fold5_test = fold5['test']

xtrain5, ytrain5 = fold5_train['x'],fold5_train['y']
xval5, yval5 = fold5_val['x'], fold5_val['y']
xtest5, ytest5 = fold5_test['x'],fold5_test['y']
################# BEGIN ASSIGNMENT ###########################

logisticRegr = LogisticRegression()
logisticRegr1 = logisticRegr.fit(xtrain1, ytrain1.ravel())
logisticRegr2 = logisticRegr.fit(xtrain2, ytrain2.ravel())
logisticRegr3 = logisticRegr.fit(xtrain3, ytrain3.ravel())
logisticRegr4 = logisticRegr.fit(xtrain4, ytrain4.ravel())
logisticRegr5 = logisticRegr.fit(xtrain5, ytrain5.ravel())

###### 1
predictions_on_val1 = logisticRegr1.predict(xval1)
cm_on_val1 = metrics.confusion_matrix(yval1, predictions_on_val1)

predictions_on_test1 = logisticRegr1.predict(xtest1)
cm_on_test1 = metrics.confusion_matrix(ytest1, predictions_on_test1)

###### 2
predictions_on_val2 = logisticRegr2.predict(xval2)
cm_on_val2 = metrics.confusion_matrix(yval2, predictions_on_val2)

predictions_on_test2 = logisticRegr2.predict(xtest2)
cm_on_test2 = metrics.confusion_matrix(ytest2, predictions_on_test2)

###### 3
predictions_on_val3 = logisticRegr3.predict(xval3)
cm_on_val3 = metrics.confusion_matrix(yval3, predictions_on_val3)

predictions_on_test3 = logisticRegr3.predict(xtest3)
cm_on_test3 = metrics.confusion_matrix(ytest3, predictions_on_test3)

###### 4
predictions_on_val4 = logisticRegr4.predict(xval4)
cm_on_val4 = metrics.confusion_matrix(yval4, predictions_on_val4)

predictions_on_test4 = logisticRegr4.predict(xtest4)
cm_on_test4 = metrics.confusion_matrix(ytest4, predictions_on_test4)

###### 5
predictions_on_val5 = logisticRegr5.predict(xval5)
cm_on_val5 = metrics.confusion_matrix(yval5, predictions_on_val5)

predictions_on_test5 = logisticRegr5.predict(xtest5)
cm_on_test5 = metrics.confusion_matrix(ytest5, predictions_on_test5)


##### Score Data Frame #############
df = df.append({'VAL': logisticRegr1.score(xval1, yval1), 'TEST': logisticRegr1.score(xtest1, ytest1)}, ignore_index=True)
df = df.append({'VAL': logisticRegr2.score(xval2, yval2), 'TEST': logisticRegr2.score(xtest2, ytest2)}, ignore_index=True)
df = df.append({'VAL': logisticRegr3.score(xval3, yval3), 'TEST': logisticRegr3.score(xtest3, ytest3)}, ignore_index=True)
df = df.append({'VAL': logisticRegr4.score(xval4, yval4), 'TEST': logisticRegr4.score(xtest4, ytest4)}, ignore_index=True)
df = df.append({'VAL': logisticRegr5.score(xval5, yval5), 'TEST': logisticRegr5.score(xtest5, ytest5)}, ignore_index=True)

###### Bar plot ############
df.plot(kind='bar', rot=0, ylim=(0.916,0.921))
